{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","App","axios","get","apiData","console","log","this","fetchData","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,iMCiBVC,YAgBNA,YAgDNA,Y,IAyENC,E,YAvCb,aAAc,uE,gNASYC,IAAMC,IAAI,gDAAiD,I,OAA3EC,E,OAGNC,QAAQC,IAAIF,G,gDAEZC,QAAQC,IAAR,M,uJAKFC,KAAKC,c,+BAKL,OACE,yBAAKC,UAAU,Y,GA1BHT,aCtGEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.59bff79a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport Button from '@material-ui/core';\nimport MoodIcon from '@material-ui/icons/Mood';\nimport './App.css';\n\nfunction WelcomeBanner (props) {\n  return (\n    <header> \n        <h1>Home of {props.CompanyName}</h1>\n        <h2>I love {props.CompanyName}</h2>\n        <p>I eat {props.food}</p>\n    </header> \n  );\n};\n\nclass WelcomeBannerClass extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render(){\n    return (\n      <header> \n        <h1>Home of {this.props.CompanyName}</h1>\n        <h2>I love {this.props.CompanyName}</h2>\n        <p>I eat {this.props.food}</p>\n      </header> \n    );\n  }\n}\n\nclass FeatureDonut extends Component {\n  constructor(props){\n    super(props);\n    console.log(props);\n  }\n  render(){\n    return(\n      <h2>Today's feature donut is { this.props.donutName }</h2>\n    )\n  }\n}\n\nfunction Header(props){\n  \n  if (props.message){\n    return(\n      <header>\n          <h1>{props.title}</h1>\n          <p>{props.message}</p>\n      </header>\n    )\n  }\n\n  return(\n    <header>\n      <h1>{props.title}</h1>\n    </header>\n    )\n}\n\nfunction Header1(props){\n  return(\n    <header>\n      <h1>{props.title}</h1>\n      { props.message && <p>{props.message}</p> }\n    </header>\n  )\n}\n\nfunction Header2(props){\n  return(\n    <header>\n      <h1>{props.title}</h1>\n      <p>{props.message ? props.message : \"Welcome to my app\"}</p>\n    </header>\n  )\n}\n\nclass MyForm extends Component {\n  constructor() {\n    super()\n    this.state = {\n      inputValue: \"\"\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if (this.state.inputValue !== prevState.inputValue) {\n      console.log('The State Change');\n    }\n  }\n\n  handleChange = (event) => {\n    console.log(event.target.value);\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <form>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.inputValue} onChange={this.handleChange} />\n        </label>\n      </form>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(){\n    super()\n    // this.state = {\n    //   featureDonuts: ['PB&J', 'Apple Cinnamon', 'Double Chocolate', 'Rose Pistachio', 'Maple Bacon', 'Sprinkle']\n    // }\n  }\n\n  async fetchData() {\n    try {\n      const apiData = await axios.get('https://api.spacexdata.com/v3/launches/latest', {\n\n      })\n      console.log(apiData);\n    }catch(error){\n      console.log(error);\n    }\n  }\n\n  componentDidMount(){\n    this.fetchData();\n  }\n  \n  \n  render() {\n    return (\n      <div className=\"App\">\n        {/* <WelcomeBanner CompanyName=\"Marvel\" food=\"Potato\"/> */}\n        {/* <WelcomeBannerClass CompanyName=\"Marvel\" food=\"Potato\" /> */}\n        {/* {\n          this.state.featureDonuts.map((donut) => {\n            return <FeatureDonut donutName={donut} />\n          })\n        } */}\n        {/* <MyForm /> */}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}